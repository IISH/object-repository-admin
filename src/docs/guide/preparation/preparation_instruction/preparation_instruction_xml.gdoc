A XML processing instruction should be:
 * named @instruction.xml@
 * placed in the main folder of the uploaded dataset.
 * well formed XML. There is no schema validation. The schema [can be found here|http://raw.github.com/IISH/object-repository-servicenodes/master/core/src/main/resources/instruction.v1.0.xsd]

For example if you uploaded these five files onto the staging area in the main folder @unittest@ then you must add the @instruction.xml@ document in the folder @unittest@ as well:

!filesetxml.gif!

This file will be deleted automatically after you uploaded it, as it is read into a database. You can re upload the
instruction any time you want. Or download it from the database back to your local PC or the staging area main folder
using the administration panel.

{note}When you download a XML processing instruction, it may have added validation messages.{note}

h3. Working example of an XML instruction
Lets say we automatically create an instruction via the administration panel for the five files we just uploaded.
On the [instructions page|guide:management/management_instruction] we edit the settings and indicate the following:
{table}
*element* | *value*
Label | My five files
Action | upsert
Access | open
Contenttype\Mimetype | image/tiff
Auto generate PIDs | filename2pid
Auto ingest valid instructions | off
Resolver baseUrl | http://hdl.handle.net/
Service to execute | all
{table}

After we press "update" we can download the XML for viewing:
{code:xml}<?xml version="1.0" encoding="utf-8"?>
<!--Instruction extracted on 11 Jun 2012 11:05:15 GMT-->
<instruction xmlns="http://objectrepository.org/instruction/1.0/"
    access="open"
    action="upsert"
    autoGeneratePIDs="filename2pid"
    contentType="image/tiff"
    label="My five files"
    resolverBaseUrl="http://hdl.handle.net/">
    <stagingfile>
        <pid>12345/1.1</pid>
            <location>/unittest/TIFF/1.1.tif</location>
            <md5>181c838e29cbb0602da4a160eece2217</md5>
    </stagingfile>
    <stagingfile>
            <pid>12345/1.3</pid>
            <location>/unittest/TIFF/1.3.tif</location>
            <md5>efac78a3f9bc224b581bd9e6003813e3</md5>
    </stagingfile>
    <stagingfile>
            <pid>12345/1.4</pid>
            <location>/unittest/TIFF/1.4.tif</location>
            <md5>b2d09024f5c5c9b823ec614a7d7bc8d0</md5>
    </stagingfile>
    <stagingfile>
            <pid>12345/1.5</pid>
            <location>/unittest/TIFF/1.5.tif</location>
            <md5>4daae1f298383d440f725f195621cebf</md5>
            </stagingfile>
    <stagingfile>
            <pid>12345/1.2</pid>
            <location>/unittest/TIFF/1.2.tif</location>
            <md5>5eaea136b6e49f2dabff2f8f1a278d7c</md5>
    </stagingfile>
</instruction>
{code}

h3. Validation
An automatic validation procedure will run the moment you @autocreate@ an instruction or ftp one into the main folder.
The results of the validation will show up in the CP administration interface per instruction and per file. In addition,
downloading the file via the CP administration interface will give you the XML instruction with @error@ elements if any.
After you correct the issue, you can reupload the XML processing instruction and files where needed.

h3. Viewing and changing the XML instruction after upload
All the uploaded datasets's main folders are visible at the [instructions page|guide:management/management_instruction] of the administration
interface. There the instructions and stagingfile elements can be tweaked. This feature is locked after ingest.

h3. Autocreate an XML processing instruction?
It can be useful when you make your own custom instructions. You can use this feature to experiment to see how a
valid instruction looks like. Should your PID or LID values be identical to the filenames, you could produce an instruction that is perfect for
ingest.

h3. Two more examples of an XML processing instruction

h4. Example with pid elements.
Lets us assume a folder structure of one main folder with five files

    {code}home-directory: /
        /folderA
        /folderA/Apple.tiff
        /folderA/Pear.tiff
        /folderA/Banana.tiff
        /folderA/Potato.png
        /folderA/SecretRecipe.tiff{code}

And to stretch the borders of our imagination a little further, suppose the CP administrator has set the following
default settings in the profile via the administration interface:

    {code}action=upsert
    access=closed
    contentType=image/tiff{code}

Now we can mostly fall back on the defaults the profile provides, but we do want to add some exceptions to the
profile rules by adding new values the XML processing instruction. Notice:

* the @contentType@ for the potato ? It is not a tiff but an *image/png*.
* And we feel the @access@ of the policy is too strict. Lets set it all to *open*.
* And lets set the @access@ to SecretRecipe.tiff to *restricted*.

The processing instruction would then could look like this:

   {code:xml}<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <instruction xmlns="http://objectrepository.org/instruction/1.0/" access="open"> <!-- access added here -->
        <stagingfile>
            <pid>12345/a</pid>
            <location>/folderA/Apple.tiff</location>
            <md5>cf3ee1101d19328145e94da1cade45bd</md5>
        </stagingfile>
        <stagingfile>
            <pid>12345/b</pid>
            <location>/folderA/Pear.tiff</location>
            <md5>f57eb0e65d11a5a73eab9d5dddf1e528</md5>
        </stagingfile>
        <stagingfile>
            <pid>12345/c</pid>
            <location>/folderA/Banana.tiff</location>
            <md5>c741cd201fafb15c5ec874ae16738671</md5>
        </stagingfile>
        <stagingfile>
            <contentType>image/png</contentType> <!-- contentType here -->
            <pid>12345/d</pid>
            <location>/folderA/Potato.png</location>
            <md5>c741cd201fafb15c5ec874ae16738671</md5>
        </stagingfile>
        <stagingfile>
            <access>restricted</access> <!-- access element here -->
            <pid>12345/e</pid>
            <location>/folderA/SecretRecipe.tiff</location>
            <md5>c741cd201fafb15c5ec874ae16738671</md5>
        </stagingfile>
    </instruction>{code}

h4. Example with lid elements
As a second example, lets suggest you are a content producer that can not supply persistent identifiers but only supply
local identifiers. Lets also assume that you made things easy and the local identifiers can be derived from the filenames
but without the extension. Here we can automatically create an instruction.

{note}this example would only work in the object repository when it can fall back on a Handle System compatible PID
webservice for which a naming authority is required. In the example we assume this so and the authority is 12345.{note}

Lets say these are the files in the staging area:

    {code}home-directory: /
        /folderA
        /folderA/Apple.tiff
        /folderA/Pear.tiff
        /folderA/Banana.tiff
        /folderA/Potato.tiff
        /folderA/FreeRecipe.tiff{code}

And we have set our profile defaults via the administration interface thus:

    {code}action=upsert
    access=closed
    contentType=image/tiff
    autoGeneratePIDs='filename2lid'{code}

Via the administration interface "instruction" tab, you can now press the autocreate button.

Alternatively, you could have created the XML instruction yourself so:

    {code:xml}<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <instruction xmlns="http://objectrepository.org/instruction/1.0/">
        <stagingfile>
            <lid>12345/Apple</lid>
            <location>/folderA/Apple.tiff</location>
            <md5>cf3ee1101d19328145e94da1cade45bd</md5>
        </stagingfile>
        <stagingfile>
            <lid>12345/Pear</lid>
            <location>/folderA/Pear.tiff</location>
            <md5>f57eb0e65d11a5a73eab9d5dddf1e528</md5>
        </stagingfile>
        <stagingfile>
            <lid>12345/Banana</lid>
            <location>/folderA/Banana.tiff</location>
            <md5>c741cd201fafb15c5ec874ae16738671</md5>
        </stagingfile>
        <stagingfile>
            <lid>12345/Potato</lid>
            <location>/folderA/Potato.tiff</location>
            <md5>c741cd201fafb15c5ec874ae16738671</md5>
        </stagingfile>
        <stagingfile>
            <lid>12345/FreeRecipe</lid>
            <location>/folderA/FreeRecipe.tiff</location>
            <md5>d241cd201fafb15c5ec874ae167386ee</md5>
        </stagingfile>
    </instruction>{code}