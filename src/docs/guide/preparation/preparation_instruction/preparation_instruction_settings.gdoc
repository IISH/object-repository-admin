You can manage the ingest of your files by setting the instruction's elements. As these configurations can be placed
at different levels ( profile's, XML instruction's and stagingfile's ) we mention that between brackets.

h3. To begin with: a friendly description
@label@ (profile and instruction element)

A human readable bit of information. This will show up on the administration
interface when viewing your instructions.

h3. Choose the services
@plan@ (profile and instruction)

Determines what services are to be used ( in no particular order ). Seperated by a comma.

To tell you want a master ingest or update:
{code}plan='StagingfileIngestMaster'{code}

To call the PID webservice to bind the persistent identifier of a file:
{code}plan='StagingFileBindPIDs'{code}
This will invoke the PID webservice to bind the PIDs to the resolve url's of the dissemination package. One must have
an account at a PID webservice and have the @pidwebserviceEndpoint@ and @pidwebserviceKey@ set.

To call the PID webservice to bind the persistent identifier of a compound identifier ( objid ):
{code}plan='StagingFileBindObjId'{code}
This will invoke the PID webservice to bind the object identifier to the resolve url's of the dissemination package. One must have
an account at a PID webservice and have the @pidwebserviceEndpoint@ and @pidwebserviceKey@ set.

To produce derivatives:
* @plan='StagingfileIngestLevel1'
* @plan='StagingfileIngestLevel2'
* @plan='StagingfileIngestLevel3'

If left empty, the default is to use all the services. This is equivalent to adding the following in an XML instruction:
{code}plan='StagingfileIngestMaster,StagingFileBindPIDs,StagingFileBindObjId,StagingfileIngestLevel1,StagingfileIngestLevel2,StagingfileIngestLevel3'{code}

h3. Additions and updates
@action@ (profile, instruction and stagingfile elements)

This controls how the ingest and dissemination procedures handles the file. The default 'upsert' is the most simple
to use as it covers most use cases.

    {code}action='upsert' ( default ){code}
    Adds the file with the given pid. If a file with the pid already exists, it will be updated with the new file.

    {code}action='add'{code}
    Add a file with the given pid. But error will occur when the pid already exists in the object repository

    {code}action='update'{code}
    Updates a file with the given pid. But error will occur if the pid does not exists in the object repository

    {code}action='delete'{code}
    Removes the file with the specified PID. At least two independent account holders are needed to save the instruction
    with this setting. If not, the command will not be executed.

h3. Access policy
@access@ (profile, instruction and stagingfile elements)

Determines which dissemination policy to use when anonymous users want to view a level1, level2 or level3 derivative.
There are three out-of-the-box policies available:

    All derivatives are viewable to the world:
    {code}access='open'{code}

    Level 1 is restricted; level 2 and 3 are viewable to the world
    {code}access='restricted'{code}

    no files can be downloaded or viewed
    {code}access='closed' (default){code}

In the administration interface a CP administrator can add new policies and thus apply custom view levels.

h3. Access policy with embargo
@embargo@ (profile, instruction and stagingfile elements)

@embargoAccess@ (profile, instruction and stagingfile elements, default: closed)

The @embargo@ is a date with the format [[yyyy-MM-dd]]. It will enforce an alternative access policy as defined in the
 @embargoAccess@ element.

Some examples:
{table}
*@access@* | *@embargo@* | *@embargoAccess@* | *@policy enforced@*
open | 2010-12-01 | restricted | On 2009-12-01 the resource has *restricted* access
open | 2010-12-01 | restricted | On 2011-12-01 the resource has *open* access
open | 2010-12-01 |  | On 2009-12-01 the resource has *closed* access
open | 2010-12-01 |  | On 2011-12-01 the resource has *open* access
closed | 2010-12-01 | open | On 2009-12-01 the resource has *open* access
closed | 2010-12-01 | open | On 2011-12-01 the resource has *closed* access
{table}

h3. The compound object identifier and ordering of files
@objid@ (instruction, stagingfile; empty by default)

Groups all the files declared the instruction; stating they all belong to the same compound.
The syntax of this file is the same as any PID element.

@seq@ (stagingfile; 1 by default)
Typically when using the objid; you would express the order for each stagingfile with the @seq@ element. If you
do not specify the order; the alphabetical ordering of your staged files will determine that sequence value.

@pdfLevel@ ( profile, instruction; 'level2' by default )
Determines which derivative level shall be used to render a PDF with. This level must consist of images.

h3. Mimetype
@contentType@ (profile, instruction and stagingfile elements)

The value indicates the nature of the file ( like "image/jpeg", "application/pdf , etc)

{note}Make sure your mimetype is correct or else the derivative creation or rendering may not go quite according to plan.{note}
For more on mimetypes see:
* [http://en.wikipedia.org/wiki/MIME|http://en.wikipedia.org/wiki/MIME]
* some good examples at [http://www.ltsw.se/knbase/internet/mime.htp|http://www.ltsw.se/knbase/internet/mime.htp]
* The object-repository has a list at [https://github.com/IISH/object-repository-scripts/blob/master/shared/contenttype.txt|https://github.com/IISH/object-repository-scripts/blob/master/shared/contenttype.txt] of content types.

h3. Checksum
@md5@ (stagingfile element)

Used to determine if the transport from one place to another (the staging area; the document database) was in deed
without flaw.

h3. File location
@location@ (stagingfile element)

The case sensitive path and filename of the digital file. The beginning of the path is the same as the home directory.

h3. The persistent identifier
@pid@ (stagingfile element)

The object-repository needs the PID (e.g. a piece of string that can be resolved via Handle System, Ark, DOI) without the base URL, for example like:
{code}
<pid>12345/mypid</pid>
<pid>hdl:12345/mypid</pid>
<pid>ark:/12345/654xz321</pid>
<pid>10.12345/jmbi.1998.2354</pid>
<pid>doi:10.12345/jmbi.1998.2354</pid>
{code}

{note}When unable to provide a pid value, use the optional substitute @lid@ stagingfile element.{note}

h3. Set a PID resolver base url
@resolverBaseUrl@ (profile and instruction element)

The resolver is a website that will know what to do with the PID. So if the PID is attached to the resolverBaseUrl we
ought to have a complete, workable url. This is used at the dissemination end of the object-repository to offer a link
for the enduser.

For example, for
@<pid>12345/mypid</pid>@
and
@resolverBaseUrl='http://hdl.handle.net/'@

the complete link on the dissemination interface would become: @http://hdl.handle.net/12345/mypid@

h3. The optional 'lid' identifier
This element is a system (your local organization's system that is ) wide unique identifier. For example a LIS number or
database key. Usage of this substitute is only needed if you are unable to supply and manage your own PIDs. You ought to
have a PID webservice account to use the LID-PID substitute.

When you submit a LID; the PID webservice will generate a PID value and insert it into the instruction. Any update
afterwards with the same LID will return this PID.

h3. The PID webservice
@pidwebserviceEndpoint@: the endpoint or url of a PID webservice

@pidwebserviceKey@: the webservice key that belongs to your account at the PID webservice

These two settings combined are required to bind the PIDs to the object-repository's resolve URLs.

h3. Automated PID creation
@autoGeneratePIDs@ (profile and instruction element)

Is trickered by the administration interface @autoCreate instruction@ and @upload instruction@ commands.

    {code}autoGeneratePIDs='none' (default){code}
    Wont do anything for an absent pid element

    {code}autoGeneratePIDs='uuid'{code}
    The system will provide an empty PID element with a seemingly random string.
    Example: @<pid>12345/10997FB2-1BFD-4191-A7E2-1AA1308960BB</pid>@

    {code}autoGeneratePIDs='filename2pid'{code}
    Substitute an empty PID element with the filename ( without suffix ).
    example: @MyLargeFile.tif@ will lead to @<pid>12345/MyLargeFile</pid>@

    {code}autoGeneratePIDs='filename2lid'{code}
    Substitute an empty lid element with the filename ( without suffix ).
    example: @MyLargeFile.tif@ will lead to @<lid>12345/MyLargeFile</lid>@

    {code}autoGeneratePIDs='lid'{code}
    Ignore an empty PID setting during auto creation and validation as long as it has a LID element

h3. Automatic ingest ( for automated batch procedures )
@autoIngestValidInstruction@ (profile and instruction element)

If set to {code}autoIngestValidInstruction='true'{code} will start an instruction process. But only if the instruction that was
uploaded or automatically generated is valid.

Typically this is useful for batch procedures that involve automated FTP uploads of files and processing instructions.

h3. Replacing derivatives
@replaceExistingDerivatives@ (profile, instruction and stagingfile element)
Used in combination with a plan that creates derivatives.
When set to false ( default ) your derivatives will be replaced by newly master converted ones.

{note}Custom derivatives will always be ingested, regardless of this setting.{note}

h3. E-mail notifications
@notificationEMail@
This value is a comma delimited list of e-mail addresses. When an instruction is completed, it will sent a message
 to those e-mails

